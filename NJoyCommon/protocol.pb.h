// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto

#ifndef PROTOBUF_INCLUDED_protocol_2eproto
#define PROTOBUF_INCLUDED_protocol_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2eproto 

namespace protobuf_protocol_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_protocol_2eproto
namespace NJoy {
class Axis;
class AxisDefaultTypeInternal;
extern AxisDefaultTypeInternal _Axis_default_instance_;
class Button;
class ButtonDefaultTypeInternal;
extern ButtonDefaultTypeInternal _Button_default_instance_;
class Hat;
class HatDefaultTypeInternal;
extern HatDefaultTypeInternal _Hat_default_instance_;
class JoyData;
class JoyDataDefaultTypeInternal;
extern JoyDataDefaultTypeInternal _JoyData_default_instance_;
class JoyListData;
class JoyListDataDefaultTypeInternal;
extern JoyListDataDefaultTypeInternal _JoyListData_default_instance_;
}  // namespace NJoy
namespace google {
namespace protobuf {
template<> ::NJoy::Axis* Arena::CreateMaybeMessage<::NJoy::Axis>(Arena*);
template<> ::NJoy::Button* Arena::CreateMaybeMessage<::NJoy::Button>(Arena*);
template<> ::NJoy::Hat* Arena::CreateMaybeMessage<::NJoy::Hat>(Arena*);
template<> ::NJoy::JoyData* Arena::CreateMaybeMessage<::NJoy::JoyData>(Arena*);
template<> ::NJoy::JoyListData* Arena::CreateMaybeMessage<::NJoy::JoyListData>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace NJoy {

enum UpdateType {
  AXIS = 1,
  BUTTON = 2,
  HAT = 3
};
bool UpdateType_IsValid(int value);
const UpdateType UpdateType_MIN = AXIS;
const UpdateType UpdateType_MAX = HAT;
const int UpdateType_ARRAYSIZE = UpdateType_MAX + 1;

const ::google::protobuf::EnumDescriptor* UpdateType_descriptor();
inline const ::std::string& UpdateType_Name(UpdateType value) {
  return ::google::protobuf::internal::NameOfEnum(
    UpdateType_descriptor(), value);
}
inline bool UpdateType_Parse(
    const ::std::string& name, UpdateType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UpdateType>(
    UpdateType_descriptor(), name, value);
}
// ===================================================================

class Axis : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NJoy.Axis) */ {
 public:
  Axis();
  virtual ~Axis();

  Axis(const Axis& from);

  inline Axis& operator=(const Axis& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Axis(Axis&& from) noexcept
    : Axis() {
    *this = ::std::move(from);
  }

  inline Axis& operator=(Axis&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Axis& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Axis* internal_default_instance() {
    return reinterpret_cast<const Axis*>(
               &_Axis_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Axis* other);
  friend void swap(Axis& a, Axis& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Axis* New() const final {
    return CreateMaybeMessage<Axis>(NULL);
  }

  Axis* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Axis>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Axis& from);
  void MergeFrom(const Axis& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Axis* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 index = 1;
  bool has_index() const;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::int32 index() const;
  void set_index(::google::protobuf::int32 value);

  // required int32 value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  ::google::protobuf::int32 value() const;
  void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NJoy.Axis)
 private:
  void set_has_index();
  void clear_has_index();
  void set_has_value();
  void clear_has_value();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 value_;
  friend struct ::protobuf_protocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Button : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NJoy.Button) */ {
 public:
  Button();
  virtual ~Button();

  Button(const Button& from);

  inline Button& operator=(const Button& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Button(Button&& from) noexcept
    : Button() {
    *this = ::std::move(from);
  }

  inline Button& operator=(Button&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Button& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Button* internal_default_instance() {
    return reinterpret_cast<const Button*>(
               &_Button_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Button* other);
  friend void swap(Button& a, Button& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Button* New() const final {
    return CreateMaybeMessage<Button>(NULL);
  }

  Button* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Button>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Button& from);
  void MergeFrom(const Button& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Button* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 index = 1;
  bool has_index() const;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::int32 index() const;
  void set_index(::google::protobuf::int32 value);

  // required bool value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  bool value() const;
  void set_value(bool value);

  // @@protoc_insertion_point(class_scope:NJoy.Button)
 private:
  void set_has_index();
  void clear_has_index();
  void set_has_value();
  void clear_has_value();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 index_;
  bool value_;
  friend struct ::protobuf_protocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Hat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NJoy.Hat) */ {
 public:
  Hat();
  virtual ~Hat();

  Hat(const Hat& from);

  inline Hat& operator=(const Hat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Hat(Hat&& from) noexcept
    : Hat() {
    *this = ::std::move(from);
  }

  inline Hat& operator=(Hat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Hat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Hat* internal_default_instance() {
    return reinterpret_cast<const Hat*>(
               &_Hat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Hat* other);
  friend void swap(Hat& a, Hat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Hat* New() const final {
    return CreateMaybeMessage<Hat>(NULL);
  }

  Hat* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Hat>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Hat& from);
  void MergeFrom(const Hat& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Hat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 index = 1;
  bool has_index() const;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::int32 index() const;
  void set_index(::google::protobuf::int32 value);

  // required int32 value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  ::google::protobuf::int32 value() const;
  void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NJoy.Hat)
 private:
  void set_has_index();
  void clear_has_index();
  void set_has_value();
  void clear_has_value();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 value_;
  friend struct ::protobuf_protocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class JoyData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NJoy.JoyData) */ {
 public:
  JoyData();
  virtual ~JoyData();

  JoyData(const JoyData& from);

  inline JoyData& operator=(const JoyData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  JoyData(JoyData&& from) noexcept
    : JoyData() {
    *this = ::std::move(from);
  }

  inline JoyData& operator=(JoyData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JoyData& default_instance();

  enum TestOneofCase {
    kAxis = 2,
    kButton = 3,
    kHat = 4,
    TEST_ONEOF_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JoyData* internal_default_instance() {
    return reinterpret_cast<const JoyData*>(
               &_JoyData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(JoyData* other);
  friend void swap(JoyData& a, JoyData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JoyData* New() const final {
    return CreateMaybeMessage<JoyData>(NULL);
  }

  JoyData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<JoyData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const JoyData& from);
  void MergeFrom(const JoyData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoyData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .NJoy.UpdateType type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::NJoy::UpdateType type() const;
  void set_type(::NJoy::UpdateType value);

  // optional .NJoy.Axis axis = 2;
  bool has_axis() const;
  void clear_axis();
  static const int kAxisFieldNumber = 2;
  private:
  const ::NJoy::Axis& _internal_axis() const;
  public:
  const ::NJoy::Axis& axis() const;
  ::NJoy::Axis* release_axis();
  ::NJoy::Axis* mutable_axis();
  void set_allocated_axis(::NJoy::Axis* axis);

  // optional .NJoy.Button button = 3;
  bool has_button() const;
  void clear_button();
  static const int kButtonFieldNumber = 3;
  private:
  const ::NJoy::Button& _internal_button() const;
  public:
  const ::NJoy::Button& button() const;
  ::NJoy::Button* release_button();
  ::NJoy::Button* mutable_button();
  void set_allocated_button(::NJoy::Button* button);

  // optional .NJoy.Hat hat = 4;
  bool has_hat() const;
  void clear_hat();
  static const int kHatFieldNumber = 4;
  private:
  const ::NJoy::Hat& _internal_hat() const;
  public:
  const ::NJoy::Hat& hat() const;
  ::NJoy::Hat* release_hat();
  ::NJoy::Hat* mutable_hat();
  void set_allocated_hat(::NJoy::Hat* hat);

  void clear_test_oneof();
  TestOneofCase test_oneof_case() const;
  // @@protoc_insertion_point(class_scope:NJoy.JoyData)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_axis();
  void set_has_button();
  void set_has_hat();

  inline bool has_test_oneof() const;
  inline void clear_has_test_oneof();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int type_;
  union TestOneofUnion {
    TestOneofUnion() {}
    ::NJoy::Axis* axis_;
    ::NJoy::Button* button_;
    ::NJoy::Hat* hat_;
  } test_oneof_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_protocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class JoyListData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NJoy.JoyListData) */ {
 public:
  JoyListData();
  virtual ~JoyListData();

  JoyListData(const JoyListData& from);

  inline JoyListData& operator=(const JoyListData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  JoyListData(JoyListData&& from) noexcept
    : JoyListData() {
    *this = ::std::move(from);
  }

  inline JoyListData& operator=(JoyListData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JoyListData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JoyListData* internal_default_instance() {
    return reinterpret_cast<const JoyListData*>(
               &_JoyListData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(JoyListData* other);
  friend void swap(JoyListData& a, JoyListData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JoyListData* New() const final {
    return CreateMaybeMessage<JoyListData>(NULL);
  }

  JoyListData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<JoyListData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const JoyListData& from);
  void MergeFrom(const JoyListData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoyListData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NJoy.JoyData data = 1;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  ::NJoy::JoyData* mutable_data(int index);
  ::google::protobuf::RepeatedPtrField< ::NJoy::JoyData >*
      mutable_data();
  const ::NJoy::JoyData& data(int index) const;
  ::NJoy::JoyData* add_data();
  const ::google::protobuf::RepeatedPtrField< ::NJoy::JoyData >&
      data() const;

  // @@protoc_insertion_point(class_scope:NJoy.JoyListData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::NJoy::JoyData > data_;
  friend struct ::protobuf_protocol_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Axis

// required int32 index = 1;
inline bool Axis::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Axis::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Axis::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Axis::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 Axis::index() const {
  // @@protoc_insertion_point(field_get:NJoy.Axis.index)
  return index_;
}
inline void Axis::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:NJoy.Axis.index)
}

// required int32 value = 2;
inline bool Axis::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Axis::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Axis::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Axis::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 Axis::value() const {
  // @@protoc_insertion_point(field_get:NJoy.Axis.value)
  return value_;
}
inline void Axis::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:NJoy.Axis.value)
}

// -------------------------------------------------------------------

// Button

// required int32 index = 1;
inline bool Button::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Button::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Button::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Button::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 Button::index() const {
  // @@protoc_insertion_point(field_get:NJoy.Button.index)
  return index_;
}
inline void Button::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:NJoy.Button.index)
}

// required bool value = 2;
inline bool Button::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Button::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Button::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Button::clear_value() {
  value_ = false;
  clear_has_value();
}
inline bool Button::value() const {
  // @@protoc_insertion_point(field_get:NJoy.Button.value)
  return value_;
}
inline void Button::set_value(bool value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:NJoy.Button.value)
}

// -------------------------------------------------------------------

// Hat

// required int32 index = 1;
inline bool Hat::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Hat::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Hat::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Hat::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 Hat::index() const {
  // @@protoc_insertion_point(field_get:NJoy.Hat.index)
  return index_;
}
inline void Hat::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:NJoy.Hat.index)
}

// required int32 value = 2;
inline bool Hat::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Hat::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Hat::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Hat::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 Hat::value() const {
  // @@protoc_insertion_point(field_get:NJoy.Hat.value)
  return value_;
}
inline void Hat::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:NJoy.Hat.value)
}

// -------------------------------------------------------------------

// JoyData

// required .NJoy.UpdateType type = 1;
inline bool JoyData::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JoyData::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JoyData::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JoyData::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::NJoy::UpdateType JoyData::type() const {
  // @@protoc_insertion_point(field_get:NJoy.JoyData.type)
  return static_cast< ::NJoy::UpdateType >(type_);
}
inline void JoyData::set_type(::NJoy::UpdateType value) {
  assert(::NJoy::UpdateType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:NJoy.JoyData.type)
}

// optional .NJoy.Axis axis = 2;
inline bool JoyData::has_axis() const {
  return test_oneof_case() == kAxis;
}
inline void JoyData::set_has_axis() {
  _oneof_case_[0] = kAxis;
}
inline void JoyData::clear_axis() {
  if (has_axis()) {
    delete test_oneof_.axis_;
    clear_has_test_oneof();
  }
}
inline const ::NJoy::Axis& JoyData::_internal_axis() const {
  return *test_oneof_.axis_;
}
inline ::NJoy::Axis* JoyData::release_axis() {
  // @@protoc_insertion_point(field_release:NJoy.JoyData.axis)
  if (has_axis()) {
    clear_has_test_oneof();
      ::NJoy::Axis* temp = test_oneof_.axis_;
    test_oneof_.axis_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::NJoy::Axis& JoyData::axis() const {
  // @@protoc_insertion_point(field_get:NJoy.JoyData.axis)
  return has_axis()
      ? *test_oneof_.axis_
      : *reinterpret_cast< ::NJoy::Axis*>(&::NJoy::_Axis_default_instance_);
}
inline ::NJoy::Axis* JoyData::mutable_axis() {
  if (!has_axis()) {
    clear_test_oneof();
    set_has_axis();
    test_oneof_.axis_ = CreateMaybeMessage< ::NJoy::Axis >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:NJoy.JoyData.axis)
  return test_oneof_.axis_;
}

// optional .NJoy.Button button = 3;
inline bool JoyData::has_button() const {
  return test_oneof_case() == kButton;
}
inline void JoyData::set_has_button() {
  _oneof_case_[0] = kButton;
}
inline void JoyData::clear_button() {
  if (has_button()) {
    delete test_oneof_.button_;
    clear_has_test_oneof();
  }
}
inline const ::NJoy::Button& JoyData::_internal_button() const {
  return *test_oneof_.button_;
}
inline ::NJoy::Button* JoyData::release_button() {
  // @@protoc_insertion_point(field_release:NJoy.JoyData.button)
  if (has_button()) {
    clear_has_test_oneof();
      ::NJoy::Button* temp = test_oneof_.button_;
    test_oneof_.button_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::NJoy::Button& JoyData::button() const {
  // @@protoc_insertion_point(field_get:NJoy.JoyData.button)
  return has_button()
      ? *test_oneof_.button_
      : *reinterpret_cast< ::NJoy::Button*>(&::NJoy::_Button_default_instance_);
}
inline ::NJoy::Button* JoyData::mutable_button() {
  if (!has_button()) {
    clear_test_oneof();
    set_has_button();
    test_oneof_.button_ = CreateMaybeMessage< ::NJoy::Button >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:NJoy.JoyData.button)
  return test_oneof_.button_;
}

// optional .NJoy.Hat hat = 4;
inline bool JoyData::has_hat() const {
  return test_oneof_case() == kHat;
}
inline void JoyData::set_has_hat() {
  _oneof_case_[0] = kHat;
}
inline void JoyData::clear_hat() {
  if (has_hat()) {
    delete test_oneof_.hat_;
    clear_has_test_oneof();
  }
}
inline const ::NJoy::Hat& JoyData::_internal_hat() const {
  return *test_oneof_.hat_;
}
inline ::NJoy::Hat* JoyData::release_hat() {
  // @@protoc_insertion_point(field_release:NJoy.JoyData.hat)
  if (has_hat()) {
    clear_has_test_oneof();
      ::NJoy::Hat* temp = test_oneof_.hat_;
    test_oneof_.hat_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::NJoy::Hat& JoyData::hat() const {
  // @@protoc_insertion_point(field_get:NJoy.JoyData.hat)
  return has_hat()
      ? *test_oneof_.hat_
      : *reinterpret_cast< ::NJoy::Hat*>(&::NJoy::_Hat_default_instance_);
}
inline ::NJoy::Hat* JoyData::mutable_hat() {
  if (!has_hat()) {
    clear_test_oneof();
    set_has_hat();
    test_oneof_.hat_ = CreateMaybeMessage< ::NJoy::Hat >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:NJoy.JoyData.hat)
  return test_oneof_.hat_;
}

inline bool JoyData::has_test_oneof() const {
  return test_oneof_case() != TEST_ONEOF_NOT_SET;
}
inline void JoyData::clear_has_test_oneof() {
  _oneof_case_[0] = TEST_ONEOF_NOT_SET;
}
inline JoyData::TestOneofCase JoyData::test_oneof_case() const {
  return JoyData::TestOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// JoyListData

// repeated .NJoy.JoyData data = 1;
inline int JoyListData::data_size() const {
  return data_.size();
}
inline void JoyListData::clear_data() {
  data_.Clear();
}
inline ::NJoy::JoyData* JoyListData::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:NJoy.JoyListData.data)
  return data_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NJoy::JoyData >*
JoyListData::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:NJoy.JoyListData.data)
  return &data_;
}
inline const ::NJoy::JoyData& JoyListData::data(int index) const {
  // @@protoc_insertion_point(field_get:NJoy.JoyListData.data)
  return data_.Get(index);
}
inline ::NJoy::JoyData* JoyListData::add_data() {
  // @@protoc_insertion_point(field_add:NJoy.JoyListData.data)
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NJoy::JoyData >&
JoyListData::data() const {
  // @@protoc_insertion_point(field_list:NJoy.JoyListData.data)
  return data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace NJoy

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::NJoy::UpdateType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NJoy::UpdateType>() {
  return ::NJoy::UpdateType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_protocol_2eproto
